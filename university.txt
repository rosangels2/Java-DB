예제1)강의 테이블에는 과목 코드와 교수번호가 있고
                 현재 강의 테이블을 기준으로 아래와 같이 출력되도록 SQL문을 작성
->강의번호 과목명 교수번호 강의실 일정 년도 학기
SELECT
class.class_num, subject.subject_title, class.class_professor_num, class.class_room,class.class_schedule, class.class_year, class.class_term
FROM class
join subject
on class.class_subject_code = subject.subject_code;


강의번호 과목코드 교수명 강의실 일정 년도 학기
SELECT     class.class_num, class.class_subject_code, professor.professor_name,                  class.class_room,class.class_schedule, class.class_year, class.class_term
FROM     class
join    professor
on    class.class_professor_num = professor.professor_num;



SELECT
class.class_num,
subject.subject_title,
professor.professor_name
FROM     class
jOIN     subject
on     class.class_subject_code = subject.subject_code
join     professor
ON     class.class_professor_num = professor.professor_num;
select에서 여러 테이블을 참조할 땐 join과 on을 중복해서 써준 뒤 마지막에만 ;을 붙인다






예제2)강의 테이블에서 과목명과 교수이름이 출력되도록 쿼리문을 작성
select class.class_num, subject.subject_title, professor.professor_name
from class
join subject
on class.class_subject_code = subject.subject_code
join professor
on class_professor_num = professor.professor_num;

교수명이 유관순인 강의만 출력되게 하는 경우 join on절 다음 where절을 입력
select class.class_num, subject.subject_title, professor.professor_name
from class
join subject
on class.class_subject_code = subject.subject_code
join professor
on class_professor_num = professor.professor_num
where professor.professor_name = '유관순';


insert할 때 에러가 발생하는 경우

테이블에 외래키가 없는 경우는 쿼리문이 잘못되지 않는 한 에러가 거의 발생하지 않는다
- 기본키가 중복되게 입력된 경우
- Not Null로 체크한 속성에 Null값을 입력한 경우
- 자료형이 맞지 않게 입력한 경우

테이블에 외래키가 있는 경우(A테이블이 B테이블과 연결)
- 외래키에 입력한 속성값이  B테이블의 기본키값에 없는 경우
        ex) 강의 테이블에 2019001이라는 교수번호를 입력했는데 교수번호에 2019001이 없는 경우


예제) a학생의 강의 정보를 출력
select course.course_num, student.student_num, student.student_name, class.*
from course
join class
on course.course_class_num = class.class_num
join student
on course.course_student_num = student.student_num
where student.student_num = '201910101';


course의 수를 출력
select count(course.course_num), student.student_num, student.student_name, class.*
from course
join class
on course.course_class_num = class.class_num
join student
on course.course_student_num = student.student_num
where student.student_num = '201910101';
테이블명이 중복되지 않는 경우 테이블명.이 생략 가능하다




예제) 성적들을 각각 비율로 환산하여 총점을 계산
select avg(course_mid*0.4 + course_end*0.4 + course_attendance*0.1 + course_report*0.1)
from course
join class
on course.course_class_num = class.class_num
join student
on course.course_student_num = student.student_num
where student.student_num = '201910100';



course의 total을 수식으로 계산해서 변경하는 방법
update course
set course.course_total =
course_mid*0.4 + course_end*0.4 + course_attendance*0.1 + course_report*0.1
where course_num >= 1;
    ->where course_class_num = 2;
course_class_num이 2인 모든 course_num들의 정보만 변경한다





자주 발생하는 에러
Error Code : 1054. Unknown …
    -> 오타가 난 경우 컬럼을 찾을 수 없는 경우

1366 : incorrect integer value: …  (정수형 타입으로 설정한 뒤 다른 자료형을 입력)
    -> 자료형을 다르게 입력했을 경우

Cannot add or update a child row : a foreign key constraint fails
    -> 없는 외래키를 입력했을 경우





외래키를 통해 다른 테이블의 정보를 참조해서 가져올 필요가 없다면 굳이 외래키로 지정하지 않아도 된다
    ex) 게시글의 작성자 id를 외래키로 지정할 경우 해당 id의 회원이 존재하는지 확인하지 않아도 되지만
          id외의 작성자의 다른 정보를 참조해서 가져올 필요가 없기에 외래키로 지정하지 않는다


외래키의 외래키를 통해  테이블 속성 정보를 가져오는 방법
    -> 직접적인 연결이 아닐 때

방법1)
select    course.course_class_num,
        classdetail.subject_title,
         course.course_student_num,
       student.student_name,       
       course.course_total
from course
join (select * from class join subject on class.class_subject_code = subject.subject_code) as classdetail
on course.course_class_num = classdetail.class_num
join student
on course.course_student_num = student.student_num;
    -> class의 외래키 subject_code를 통해 subject 테이블을 참조할 때 join에 select문을 작성한 뒤
        as를 통해 이름을 다시 붙여주고 붙여준 이름을 통해 on을 작성한다










방법2)
select     course.course_class_num,
         subject_title,
         course.course_student_num,
       student.student_name,
       course.course_total
from course
join student
on  course.course_student_num = student.student_num
join class
on course.course_class_num = class.class_num
join subject
on subject.subject_code = class.class_subject_code;
    -> 방법2로 join절을 순서대로 사용해 테이블을 연결한 뒤 속성을 가져와도 결과는 같지만
        방법2는 이어진 테이블의 모든 속성을 가져오기 때문에 테이블들의 속성이 많을 경우 불필요한 정보가 많아져
        방법1을 사용해서 필요한 정보들만을 가져오는 게 데이터베이스의 크기가 클수록 더 효율적이다







예제) A학생의 평균을 출력
select    course.course_class_num,
subject_title,
course.course_student_num,
       student.student_name,
       avg(course.course_total)
from course
join student
on  course.course_student_num = student.student_num
join class
on course.course_class_num = class.class_num
join subject
on subject.subject_code = class.class_subject_code
where student_name like '%니%';



예제) A학생의 평균 평점을 출력 (4.5 만점 기준)
select     course.course_student_num,
       student.student_name,
       avg(course.course_total*0.045) as average        //또는 total / 100 * 4.5
from course
join student
on  course.course_student_num = student.student_num
join class
on course.course_class_num = class.class_num
join subject
on subject.subject_code = class.class_subject_code
where student_name like '%니%';

------------------

예제)신입생들의 학생수를 출력하는 쿼리문을 작성
select count(student_num)
from student
where student_grade = 1 and student_num like '2019%';







예제)A학생의 2019년도 1학기 수강 과목들을 출력
select     subject_detail.subject_title,
 student.student_num,
 student.student_name,
       class.class_year,
       class.class_term
from course
join (select * from class join subject on class.class_subject_code = subject.subject_code) as subject_detail
on course.course_class_num = subject_detail.class_num
join student
on course.course_student_num = student.student_num
join class
on course.course_class_num = class.class_num
where student.student_num = '201910100' and class.class_year = '2019' and class.class_term = 1;
예제)A학생이 수강한 전공 필수 과목들을 출력
select     subject_detail.subject_title,
 student.student_num,
 student.student_name,
       class.class_year,
       class.class_term,
       subject_detail.subject_type
from course
join (select * from class join subject on class.class_subject_code = subject.subject_code) as subject_detail
on course.course_class_num = subject_detail.class_num
join student
on course.course_student_num = student.student_num
join class
on course.course_class_num = class.class_num
where student.student_num = '201910100' and subject_detail.subject_type = '전공필수';






예제)A학생의 2019년도 1학기 수강과목들과 성적을 출력
select      student.student_num,
         student.student_name,
       student.student_grade,
       class.class_year,
       class.class_term,
       course.course_total
from course
join (select * from class join subject on class.class_subject_code = subject.subject_code) as subject_detail
on course.course_class_num = subject_detail.class_num
join student
on course.course_student_num = student.student_num
join class
on course.course_class_num = class.class_num
where student.student_num = '201910100' and class.class_year = '2019' and class.class_term = 1;




예제)A학생의 2019년도 1학기 수강 평균을 4.5점 만점 기준으로 환산해서 출력
select      student.student_num,
student.student_name,
       student.student_grade,
       class.class_year,
       class.class_term,
       avg(course.course_total*0.045) as '1학기 총점'
from course
join (select * from class join subject on class.class_subject_code = subject.subject_code) as subject_detail
on course.course_class_num = subject_detail.class_num
join student
on course.course_student_num = student.student_num
join class
on course.course_class_num = class.class_num
where student.student_num = '201910100' and class.class_year = '2019' and class.class_term = 1;


