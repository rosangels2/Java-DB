변수 선언 방법
 - 자료형 변수명;
 - 자료형 변수명 = 초기값;
 - 중복된 변수 사용 불가

,를 쓰면 자료형 입력 x
ex) int a, b, c;

자료형
논리형 : boolean = 저장할 수 있는 값이 true, false
문자형 : char = 저장할 수 있는 값이 '문자(2byte) / c언어의 문자는 1byte
정수형 :byte = 1byte, short = 2byte, int = 4byte, long = 8byte
실수형 : float = 4byte(유효자리 7자조건문

if(조건식){ 
             실행문
}
= 조건식이 참이면 실행문을 실행해라



if-else문

문제2)조건식이 참이라면 실행문 1을 실행하고
if(조건식){
	실행문1;
}
조건식이 거짓이라면 실행문 2를 실행해라
else{
	실행문2;
}
 - else는 if문 없이 혼자 사용할 수 없다



if-else if문
 - else if가 나오면 그 위의 조건문들은 모두 거짓

조건식1이 참이면 실행문 1을 실행하고
if(조건식1){
	실행문1;
}
조건식1이 거짓이고 조건식2가 참이면 실행문2를 실행하고
else if(조건식2){
	실행문2;
}
조건식1, 2가 거짓이고 조건식3이 참이면 실행문3을 실행해라
else if(조건식3){
	실행문3;
}
위의 모든 조건식이 거짓이면 실행문4을 실행해라
else{
	실행문4;
}


중첩 if문
조건식1이 참이고 조건식2가 참이면 실행문1을 실행한다
if(조건식1){
	if(조건식2){
		실행문1;
	}
	조건식1이 참이고 조건식2가 거짓이면 실행문2를 실행한다
	else{
		실행문2;
	}


조건식1이 참이고 조건식2가 참이면 실행문1을 실행하라
	if(조건식1 && 조건식2){
	실행문1;
}

조건식1이 참이고 조건식2가 거짓이면 실행문2를 실행한다
else if(조건식1 && !조건식2){
	실행문2;
}


if = ~하면 -해라
~ = 조건식
- = 실행문

num이 2의 배수이면
 -> num를 2로 나누었을 때 나머지가 0과 같다면
 -> num % 2 == 0












switch문
switch(제한된 값을 결과로 가지는 변수나 식을 사용할 때만 이용)
case의 값으로 올 수 있는 자료형은 정수, 문자, 문자열만 가능

switch(결과가 제한적인 변수나 식){
case 값1: 	값이 1이라면 실행문1을 실행
	실행문1;
case 값2: 값이 2라면 실행문 2를 실행
	실행문2;
	break;	조건식으로 이동
....
default: case의 값이 아니라면 실행문 3을 실행
	실행문3;




반복문 - for문, while문, do while문
 - 일정한 규칙이 있고 반복횟수를 알 때 사용
 - for문과 while문은 동작 방식이 같고 형태만 다르고 한번도 실행되지 않을 수 있다

 - do while문은 무조건 1번은 실행돼야 한다

for(초기화 ;조건식 ;증감연산 ){
	실행문;
}

초기화 : 조건식에서 사용할 변수를 초기화하거나, 실행문에서 사용할 변수를 초기화한다
조건식 : 조건식이 참이라면 실행문을 실행하고, 조건식이 거짓이면 반복문을 종료한다
증감식 : 조건식에서 사용하는 변수를 증가 또는 감소 시킨다


break와 continue
break(종료)
- 반복문에서 break는 if문을 동반하며 break문을 만나는 순간 반복문을 종료한다

continue(스킵)
- 반복문에서 continue는 if문을 동반하며 continue를 만나면 아래 코드를 실행하지 않고 증감연산으로 이동한다
- while문에서의 continue는 조건식으로 이동한다


변수 명명 규칙
 - 숫자 시작 x
 - 예약어 사용 x
 - 특수문자는 _와 $만 허용
 - 대소문자 구분

변수 명명 관례
 - 두 단어 이상일 경우 두번째 단어부터 첫글자를 대문자로 한다(카멜 표기법)
 - 이름에 의미 부여
 - 자주 쓰는 변수명은 약어로 사용



오버플로우 : 표현 범위 초과시 발생(p.64)
 - 최대값 +1 = 최소값
 - 최소값 -1 = 최대값



자료형 변환
 - 자동 형변환이 되는 경우 -> 작은 것에서 큰 것으로 (데이터 손실 x)
 - 자동 형변환이 안되는 경우 명시적 변환 필요 -> 큰 것에서 작은 것으로 (데이터 손실 o)





연산자

 대입연산자 
  = : 오른쪽의 값을 왼쪽 값에 넣는다

산술 연산자
 - 정수 / 정수 = 정수 (명시적 형변환을 사용해야 실수값을 가질 수 있다)
 - 실수 + 정수 = 실수
 - 문자 + 정수 = 정수 (해당 문자를 유니코드 값의 정수로 변형해서 계산)


나머지 연산자 (%) 
5 나누기 3의 나머지 2를 구하는 연산자 ( 5 % 3 = 2)
홀수와 짝수를 판별할 때 사용


비교 연산자
 - 결과가 참 또는 거짓
A < B : A가 B보다 작다
A > B : A가 B보다 크다
A <= B : A가 B보다 작거나 같다(같거나 작다)
A =< B : X
A >= B : A가 B보다 크거나 같다
A == B : A와 B가 같다(대입연산자 =와 혼동할 수 있다)
A != B : A와 B가 같지 않다


논리 연산자(결과가 참 또는 거짓, ~하고, ~거나, ~가 아니다로 표현)
- 좌, 우측에 참 또는 거짓의 조건식이 나온다

&&(AND연산자) - 양쪽의 값이 true일 경우만 true > 비교연산자와 사용
참 && 참 = 참
참 && 거짓 = 거짓
거짓 && 참 = 거짓
거짓 && 거짓 = 거짓


||(OR연산자) - 한쪽값만 true여도 true
참 || 참 = 참
참 || 거짓 = 참
거짓 || 참 = 참
거짓 || 거짓 = 거짓

!(NOT 연산자) - 반대로 표현
!참 = 거짓
!거짓 = 참

조건식 - 결과가 참 또는 거짓
수학 1 <= x <= 10 : x는 1보다 크거나 같고 10보다 작거나 같다
코딩 1<= x && x <= 10

비트 연산자 (&, |, ~, ^, <<, >>)
 - 좌측과 우측에 변수가 나온다
 - 결과가 특정 값

&&(AND연산자) = 양쪽 값이 모두 1이어야 1을 결과로 얻는다.

||(OR연산자) = 양쪽 중 한쪽 값이 1이면 1을 결과로 얻는다.

^(xor, 베타논리 연산자) - 양쪽 값이 서로 다를 때만 1을 결과로 얻는다.
참 ^ 참 = 0
참 ^ 거짓 = 1
거짓 ^ 참 = 1
거짓 ^ 거짓 = 0

>>, << (쉬프트연산자)
<<(곱하기 효과) - 1당 곱하기 2
>>(나누기 효과) - 1당 나누기 2

~(비트 전환 연산자)


단항 연산자(위치에 따라 값이 변화)

++(증가 연산자) - 값을 1 증가
--(감소 연산자) - 값을 1 감소


조건 연산자 - 조건문으로 대체 가능
