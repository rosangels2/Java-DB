예제) 로그인 기능
아이디와 비밀번호를 입력 후 로그인 버튼을 클릭하면 데이터베이스에 있는 회원 테이블에 아이디와 일치하는 정보가 있는지 검색하고
일치하는 정보가 없으면 로그인 실패 처리, 있으면 해당 정보를 가져와서 비밀번호 비교 후 일치하면 로그인 성공 처리

순서
1. 로그인 버튼을 클릭하면 입력한 정보를 컨트롤러에 post 방식으로 전달(jsp)
 - 개인 정보가 있으므로

2. 서비스에게 회원 여부를 확인하여 회원이 맞으면 메인 페이지로, 아니면 로그인 페이지로 이동(컨트롤러)

3. dao에게 id와 일치하는 회원 정보를 가져와 저장한 후, 저장된 회원 정보가 없으면(null이면) 컨트롤러에게 회원이 아님을 알려주고,
   있으면 가져온 회원정보 비밀번호와 입력한 회원정보 비밀번호를 비교하여 일치하면 컨트롤러에게 로그인 성공을,
   일치하지 않으면 로그인 실패를 알려준다





예제) 정보 수정 기능
회원가입 페이지를 이용하여 회원 수정 페이지를 생성하고 회원 수정 기능을 추가

순서
jsp
로그인 시 회원 정보 수정 메뉴가 있는 member.jsp 구현
회원 정보 수정 선택 시 이동할 페이지인 회원 정보 수정 코드를 /member/modify.jsp파일에 구현

컨트롤러
@RequestMapping을 통해 해당 URL의 경로에서 보여줄 JSP파일을 return
해당 JSP파일에서 입력한 값이 매개변수를 통해 객체에 잘 저장되는지 콘솔을 통해 확인
입력된 값이 제대로 출력된다면 Service 클래스에 해당 매개변수들을 사용하는 인터페이스를 선언
Mapper.xml에서 DAO의 구현이 끝나면 Service를 호출하여 기능을 실행한 뒤 결과에 따라 보여줄 JSP 페이지를 return

서비스
컨트롤러에서 지정한 매개변수들을 사용하는 인터페이스를 선언한 뒤 인터페이스를 구현할 implements 클래스를 생성
implements 클래스에 @Service 키워드 입력을 통해 서비스 클래스 사용을 선언
조건식을 이용해 null값이 입력됐을 때의 예외 처리와 원하는 정보를 얻기 위한 기능을 처리
예시)
	public boolean modify(MemberVO mVo, String oPw){
		if(mVo == null) {
			return false;
		}
		mVo.setName("");
		MemberVO oVo = memberDao.getMember(mVo.getId());
		if(oVo.getPw().equals(oPw)){
			memberDao.modify(mVo);	//원하는 조건을 만족하면 DAO클래스의 인터페이스를 호출해 쿼리문을 실행
			return true;
		}
		return false;
	}
원하는 조건에 만족하지 못하면 false를, 원하는 정보를 얻는 조건을 만족하면 true를 반환하며 DAO클래스의 인터페이스를 호출

DAO
service클래스에서 호출하여 실행될 매개변수를 가진 인터페이스를 선언
Mapper.xml에서 해당 인터페이스의 매개변수 정보를 이용해 실행되는 쿼리문을 작성해 인터페이스를 구현
쿼리문으로 인터페이스를 구현하면 컨트롤러에서 서비스를 호출하여 DAO를 차례대로 호출

DB
xml의 쿼리문을 통해 해당 정보에 대한 기능을 실행하는 역할

