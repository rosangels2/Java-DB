1. jsp, service, serviceImp, DAO, VO, mapper 파일 생성 또는 구현

2. 컨트롤러에서 URL에 /signup을 입력받으면 실행될 메서드를 매핑
예시)
	@RequestMapping(value="/member/signup", method = RequestMethod.GET)
	public String signupGet() {
		logger.info("회원가입 진행");
		
		return "member/signup";
	}

3. signup.jsp에 화면 구성
예시)
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.css">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css" integrity="sha384-oS3vJWv+0UjzBfQzYUhtDYW+Pj2yciDJxpsK1OYPAYjqT085Qq/1cq5FLXAZQ7Ay" crossorigin="anonymous">
	<script src="https://code.jquery.com/jquery-3.4.1.js"></script>
	<title>회원가입</title>
<style>
	input.form-control:focus{
		color: green;
		background-color: aqua;
		font-size: 30px;
	}
	input.form-control:hover{
		background-color: wheat;
	}
	.container{
		border: 1px solid black;
		width: 50%;
	}
	i.fab{
		font-size: 100px;
		color: red;
	}
</style>
<script type="text/javascript">
	$(document).ready(function(){
		$('#id').change(function(){
			if(!checkLength('#id',8,13)){
				alert('ID는 8~13자리를 입력해야 합니다.');
			}
		});
		//pw1 : 길이 -> 내용이 변경됐을 때 체크 or 가입 버튼이 눌렸을 때
		$('#pw').change(function(){
			if(!checkLength('#pw',8,13)){
				alert('비밀번호는 8~13자리를 입력해야 합니다.');
			}
		});
		$('#pw1').change(function(){
			if(!equals('#pw','#pw1')){
				alert('비밀번호와 비밀번호 확인이 일치하지 않습니다');
			}
		});
		//pw2 : pw1과 같은지 확인 -> 내용이 변경됐을 때 체크 or 가입 버튼이 눌렸을 때
		$('#ok').click(function(){
			if(!checkLength('#pw',8,13)){
				alert('비밀번호는 8~13자리를 입력해야 합니다.');
			}else if(!equals('#pw','#pw1')){
				alert('비밀번호와 비밀번호 확인이 일치하지 않습니다');
			}
		});
	});
	//일반함수 선언 및 구현은 .ready함수 밖에서 한다 -> ready 밖에서 호출할 경우 화면이 구성되기 전에 함수가 실행돼 에러가 발생할 수 있다
	function checkLength(selector,min,max){		
		var length = $(selector).val().length;	//변수 length에 매개변수로 입력받은 selector의 value값 길이를 저장한다
		if(min > max){
			var tmp = min;
			min = max;
			max = tmp;
		}
		if(length < min || length > max){
			return false;
		}else{
			return true;
		}
	}
	function equals(sel1,sel2){
		if($(sel1).val() == $(sel2).val()){
			return true;
		}else{
			return false;
		}
	}	
</script>
</head>
<body>
	<div class="row m-5">
		<div class="container offset-4 col-4">
			<div class="offset-3"> <h1>회원가입</h1></div>
			<form method="post" action="">
				<div class="form-group">
					<label for="usr">아이디</label>
					<input type="text" class="form-control col-7" id="id" placeholder="아이디" name="id">
				</div>
				<div class="form-group">
					<label for="pwd">비밀번호</label>
					<input type="password" class="form-control col-7" id="pw" placeholder="비밀번호" name="pw">
				</div>
				<div class="form-group">
					<label for="pwdRe">비밀번호 확인</label>
					<input type="password" class="form-control col-7" id="pw1" placeholder="비밀번호 확인" name="pw1">
				</div>
				<div class="form-group">
					<label for="sel1">성별</label>
					<select class="form-control col-4" id="sel1" name="gender">
						<option value="남">남자</option>
						<option value="여">여자</option>
					</select>
				</div>
				<div class="form-group">
					<label for="email">이메일</label>
					<input type="text" class="form-control" id="email" placeholder="이메일" name="email">
				</div>
				<button type="button" class="btn btn-dark float-right" id="cancel" name="cancel">취소</button>
				<button type="submit" class="btn btn-primary float-right" id="ok" name="ok">입력완료</button>
			</form>
		</div>
	</div>
</body>
</html>

4. 컨트롤러에서 서비스 인터페이스 선언 후 quick fixed를 통해 인터페이스 생성
예시)
	@RequestMapping(value="/member/signup", method = RequestMethod.POST)
	public String signupPost(Model model, MemberVO mVo) {
		logger.info("회원가입 진행 중");

			memberService.signup(mVo);	//해당 부분의 quick fixed를 통해 서비스 인터페이스 생성
		
		return "redirect:/member/signup";
	}

5. quick fixed를 통해 서비스 인터페이스 생성
예시)
	boolean signup(MemberVO mVo);

6. quick fixed를 통해 서비스 implements 클래스에 서비스 인터페이스를 구현 후 DAO의 객체.메서드명으로 DAO의 인터페이스를 호출
예시)
	public boolean signup(MemberVO mVo) {
		
		if(mVo == null) {	//매개변수 객체가 null일 때의 예외처리
			return false;
		}
		MemberVO oVo = memberDao.getMember(mVo.getId());	//멤버 객체를 가져온 뒤 변수 객체에 저장
		if(oVo == null) {	//가져온 객체가 비어있다면 회원가입 진행
			memberDao.signup(mVo);	//해당 인터페이스를 quick fixed를 통해 DAO에 생성
			return true;
		} 
		return false;
	}

7. DAO 인터페이스 파일 생성 및 DAO 인터페이스 생성
예시)
	void signup(MemberVO mVo); 

8. MemberVO 파일 생성 및 클래스 구현
예시)
public class MemberVO {
	private String id;
	private String pw;
	private String gender;
	private String email;
	private String name;
	
	
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getPw() {
		return pw;
	}
	public void setPw(String pw) {
		this.pw = pw;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
	@Override
	public String toString() {
		return "MemberVO [id=" + id + ", pw=" + pw + ", gender=" + gender + ", email=" + email + ", name=" + name + "]";
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((pw == null) ? 0 : pw.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		MemberVO other = (MemberVO) obj;
		if (pw == null) {
			if (other.pw != null)
				return false;
		} else if (!pw.equals(other.pw))
			return false;
		return true;
	}

}

9. MemberMapper 파일 생성 및 DAO 인터페이스를 쿼리문으로 연결
예시)
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.green.test.dao.MemberDAO">
  <select id="getMember" resultType="kr.green.test.vo.MemberVO">
  	select * from member where id = #{id}
  </select>
  <insert id="signup">
  	insert into member(id,pw,gender,email,name)
  				values(#{id},#{pw},#{gender},#{email},#{name})
  </insert>
</mapper>

10. 구현한 서비스의 결과를 통해 연결할 페이지를 컨트롤러의 메서드 return에 입력
예시)
	@RequestMapping(value="/signup", method = RequestMethod.GET)
	public String signupGet() {
		logger.info("회원가입 진행");
		
		return "signup";
	}
	@RequestMapping(value="/signup", method = RequestMethod.POST)
	public String signupPost(Model model, MemberVO mVo) {
		logger.info("회원가입 진행 중");

			if(memberService.signup(mVo)) {	//가입에 성공했을 경우
				return "redirect:/";		//홈으로 이동
			}
			
		return "redirect:/signup";
	}