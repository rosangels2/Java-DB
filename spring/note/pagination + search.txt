Pagination - 페이지에 한번에 표시할 게시글들을 제한하고 페이지 목록으로 구분하여 표시하는 방식
참고 문헌
http://bootstrap4.kr/docs/4.0/components/pagination/
https://www.w3schools.com/bootstrap4/bootstrap_pagination.asp


1. Criteria 클래스 생성 후 구현
예시) 경로 - src/main/java > kr.green.spring.pagination 패키지 생성 > Criteria 클래스 생성
public class Criteria {
		
		private int page; //현재 페이지
		private int perPageNum;	//한 페이지 당 컨텐츠 갯수
		
		public Criteria() {	//기본 생성자
			this.page = 1;
			this.perPageNum = 10;
		}
	
		public int getPage() {
			return page;
		}
		public void setPage(int page) {
			if(page <= 0) {		//현재 페이지 번호를 음수로 설정하려 할 때
				this.page = 1;
			}
			else
				this.page = page;
		}
		public int getPerPageNum() {
			return perPageNum;
		}
		public void setPerPageNum(int perPageNum) {
			if(perPageNum <=0 || perPageNum > 100) {	//한 페이지당 컨텐츠 개수를 100개까지로 제한
				this.perPageNum = 10;
			}
			else
				this.perPageNum = perPageNum;
		}

		@Override
		public String toString() {
			return "Criteria [page=" + page + ", perPageNum=" + perPageNum + ", type=" + type + ", search=" + search
					+ "]";
		}

		/* 쿼리문에서 limit에 사용되는 인덱스를 계산하는 getter */
		public int getPageStart() {
			return (this.page -1) * perPageNum;	//쿼리문 limit 번지, 개수; 에서 번지를 결정 하기 위한 코드
		}
	
}

2. /board/list를 매핑하는 컨트롤러에 매개변수로 Criteria 클래스의 객체를 추가하고 메서드의 매개변수에도 추가
예시)
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String boardListGet(Model model, Criteria cri){	//Criteria의 기본 생성자를 통해 객체를 생성
	    System.out.println(cri);	//criteria클래스의 객체 cri를 출력
	    ArrayList<BoardVO> boardList = boardService.getBoardList(cri);	//boardService클래스의 getBoardList 인터페이스를 호출해 결과값을 저장
	    int totalCount = boardService.getTotalCount(cri);
	    return "/board/list";
	}

3. 컨트롤러에서 매개변수를 추가한 서비스 인터페이스에 매개변수로 Criteria클래스 객체 cri를 추가
예시) boardService.java
	ArrayList<BoardVO> getBoardList(Criteria cri);
	int getTotalCount(Criteria cri);

4. 해당 서비스 구현 클래스에서도 매개변수를 수정
예시) boardServiceImp.java
	@Override
	public ArrayList<BoardVO> getBoardList(Criteria cri) {
		
		return boardDao.getBoardList(cri);
	}
	@Override
	public int getTotalCount(Criteria cri) {
		return boardDao.getTotalCount(cri);
	}

5. 서비스에서 호출하는 DAO 인터페이스에도 매개변수를 추가
예시) boardDAO.java
	ArrayList<BoardVO> getBoardList(Criteria cri);

	int getTotalCount(Criteria cri);

6. mapper에서 쿼리문 수정
예시) boardMapper.xml
  <select id="getBoardList" resultType="kr.green.spring.vo.BoardVO">
  	select * from board where valid = 'I'
  	order by num desc
  	limit #{pageStart}, #{perPageNum}	<!-- Criteria 클래스의 getter를 통해 시작 게시글의 번지와 한 페이지에 표시할 게시글 수를 제한 -->
  </select>
  <select id="getTotalCount" resultType="int">
		select count(*) from board where valid = 'I'
   </select>

7. 전체적으로 페이지를 관리하는 PageMaker 클래스 생성
예시) 경로 - src/main/java > kr.green.spring.pagination 패키지 생성 > PageMaker 클래스 생성
public class PageMaker {

	private int totalCount;	//게시글의 전체 개수(마지막 페이지에 다음 버튼을 비활성화하기 위해 필요)
	private int startPage;	//페이지네이션의 시작 번호
	private int endPage;	//페이지네이션의 끝 번호
	private boolean prev;	//이전 버튼 활성화 여부
	private boolean next;	//다음 버튼 활성화 여부
	private int displayPageNum;	//페이지네이션의 개수
	private Criteria criteria;	//현재 페이지 정보
	
	public void calcData() {
		//startPage와 endPage는 현재 페이지 정보인 criteria와 displayPageNum을 이용하여 계산
		endPage = (int) (Math.ceil(criteria.getPage()/(double) displayPageNum)*displayPageNum);
		//displayPageNum이 10이고 현재 페이지가 3페이지면 startPage = 1, endPage = 10이 되도록 계산
		//ceil - 올림을 하는 함수
		
		startPage = (endPage - displayPageNum)+1;	//마지막 페이지 기준으로 계산
		//startPage = 31 , perPageNum = 15, totalCount = 563
		
		int tempEndPage = (int)(Math.ceil(totalCount/(double)criteria.getPerPageNum()));	//총 게시글의 마지막 페이지 계산
		
		if(endPage > tempEndPage){	//게시글의 마지막 페이지와 총 개시글 기준 마지막 페이지를 비교	
			endPage = tempEndPage;	//총 게시글 기준 마지막 페이지가 작을 경우 게시글의 마지막 페이지를 총 게시글 기준으로 변경 
		}

		prev = startPage == 1 ? false : true;	//스타트페이지가 1이면 false로 만들고 1이 아니면 true로 만든다
		
		next = endPage * criteria.getPerPageNum() >= totalCount ? false:true; 
		//마지막 페이의 게시글 수가 총 게시글 수보다 크면 next를 숨김(게시글이 더 남아있기 때문)
	}
	
	public int getTotalCount() {
		return totalCount;
	}
	public void setTotalCount(int totalCount) {
		this.totalCount = totalCount;
		calcData();
	}
	public int getStartPage() {
		return startPage;
	}
	public void setStartPage(int startPage) {
		this.startPage = startPage;
	}
	public int getEndPage() {
		return endPage;
	}
	public void setEndPage(int endPage) {
		this.endPage = endPage;
	}
	public boolean isPrev() {
		return prev;
	}
	public void setPrev(boolean prev) {
		this.prev = prev;
	}
	public boolean isNext() {
		return next;
	}
	public void setNext(boolean next) {
		this.next = next;
	}
	public int getDisplayPageNum() {
		return displayPageNum;
	}
	public void setDisplayPageNum(int displayPageNum) {
		this.displayPageNum = displayPageNum;
	}
	public Criteria getCriteria() {
		return criteria;
	}
	public void setCriteria(Criteria criteria) {
		this.criteria = criteria;
	}
	@Override
	public String toString() {
		return "PageMaker [totalCount=" + totalCount + ", startPage=" + startPage + ", endPage=" + endPage + ", prev="
				+ prev + ", next=" + next + ", displayPageNum=" + displayPageNum + ", criteria=" + criteria + "]";
	}

8. /views/board/list.jsp에 페이지네이션 코드를 추가
예시)
	<ul class="pagination" style="justify-content: center;">
	    <c:if test="${pageMaker.prev}">	<!-- 이전 버튼(boolean 값이 true면 보여준다) -->
	        <li class="page-item">
	            <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${pageMaker.startPage-1}">Previous</a>
	        </li>							<!-- 현재 페이지의 스타트 페이지에서 -1을 뺀 값을 페이지로 결정 -->
	    </c:if>
	    <c:forEach begin="${pageMaker.startPage }" end="${pageMaker.endPage}" var="index">	<!-- begin/end를 통해 시작과 끝을 지정하고 반복 -->
	        <c:if test="${pageMaker.criteria.page == index}">	<!-- uri의 페이지 번호가 index와 같다면 -->
	        <li class="page-item active">							<!-- index : 반복문의 i같은 역할로 증감연산 -->
	            <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${index}">${index}</a>	<!-- 숫자를 찍는 역할 -->
	        </li>
	        </c:if>
	        <c:if test="${pageMaker.criteria.page != index}">	<!-- uri의 페이지 번호가 index와 다르다면 -->
	        <li class="page-item">							<!-- index : 반복문의 i같은 역할로 증감연산 -->
	            <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${index}">${index}</a>	<!-- 숫자를 찍는 역할 -->
	        </li>
	        </c:if>
	    </c:forEach>
	    <c:if test="${pageMaker.next}">	<!-- 다음버튼 -->
	        <li class="page-item">
	            <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${pageMaker.endPage+1}">Next</a>
	        </li>
	    </c:if>
	</ul>

9. boardController에서 pageMaker를 호출
예시)
	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String boardListGet(Model model, Criteria cri){	//Criteria의 기본 생성자를 통해 객체를 생성
	    logger.info("게시판 리스트 진행");		
	    System.out.println("cri = "+cri);
	    cri.setPerPageNum(2);	//보여줄 게시글 개수를 5로 재설정
	    ArrayList<BoardVO> boardList = boardService.getBoardList(cri);	//boardService클래스의 getBoardList 인터페이스를 호출해 결과값을 저장
	    PageMaker pM = new PageMaker();	//pageMaker 객체를 생성 후 복사
	    pM.setCriteria(cri);		//보여줄 게시글들의 설정을 수정
	    pM.setDisplayPageNum(5);	//페이지네이션의 개수를 설정
	    int totalCount = boardService.getTotalCount(cri);	//총 게시글 수를 계산하여 변수에 저장
	    pM.setTotalCount(totalCount);	//페이지네이션을 계산하기 위해 총 게시글 수를 수정
	    model.addAttribute("pageMaker", pM);	//pageMaker의 객체를 model의 변수에 저장
	    model.addAttribute("list", boardList);	//limit 설정에 맞는 게시글들을 가져와 model의 변수에 저장하여 jsp에서 사용
	    return "/board/list";
	}

+검색기능 추가
10. 검색 기능 추가를 위해 Criteria클래스에 멤버변수로 검색어와 타입을 추가하고 getter/setter 호출 및 toString 재호출(객체 정보 출력을 위해)
예시) Criteria.java
		private int page; //현재 페이지
		private int perPageNum;	//한 페이지 당 컨텐츠 갯수
		private int type;	//검색 카테고리
		private String search;	//검색할 값
		
		public Criteria() {	//기본 생성자
			this.page = 1;
			this.perPageNum = 10;
			this.type = 0;
			this.search = "";
		}

		@Override
		public String toString() {
			return "Criteria [page=" + page + ", perPageNum=" + perPageNum + ", type=" + type + ", search=" + search
					+ "]";
		}

11. list.jsp에 검색을 위한 form태그, 카테고리를 분류할 select태그, 검색값을 입력받을 input창, 검색을 전송할 button을 추가
예시) list.jsp
	<form class="" method="get" action="<%=request.getContextPath()%>/board/list">
		<select name="type" class="float-left">
			<option value="0">선택</option>
			<option value="1" <c:if test="${pageMaker.criteria.type eq 1}">selected</c:if> >제목</option>		<!-- URI 정보대로 선택 유지-->
			<option value="2" <c:if test="${pageMaker.criteria.type eq 2}">selected</c:if> >내용</option>
			<option value="3" <c:if test="${pageMaker.criteria.type eq 3}">selected</c:if> >작성자</option>
		</select>
		<input type="text" name="search" class="float-left" value="${pageMaker.criteria.search}">
		<button type="submit" class="btn btn-outline-success float-left">검색</button>
	</form>

12. 검색창이 적용되도록 list.jsp의 페이지네이션을 수정
예시) list.jsp
	<ul class="pagination" style="justify-content: center;">
	    <c:if test="${pageMaker.prev}">	<!-- 이전 버튼(boolean 값이 true면 보여준다) -->
	        <li class="page-item">
	            <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${pageMaker.startPage-1}&type=${pageMaker.criteria.type}&search=${pageMaker.criteria.search}">Previous</a>
	        </li>							<!-- 현재 페이지의 스타트 페이지에서 -1을 뺀 값을 페이지로 결정 -->
	    </c:if>
	    <!-- 페이지네이션 목록 -->
	    <c:forEach begin="${pageMaker.startPage }" end="${pageMaker.endPage}" var="index">	<!-- begin/end를 통해 시작과 끝을 지정하고 반복 -->
	        <li class="page-item">							<!-- index : 반복문의 i같은 역할로 증감연산 -->
	            <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${index}&type=${pageMaker.criteria.type}&search=${pageMaker.criteria.search}">${index}</a>	<!-- 숫자를 찍는 역할 -->
	        </li>
	    </c:forEach>
	    <c:if test="${pageMaker.next}">	<!-- 다음버튼 -->
	        <li class="page-item">
	            <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${pageMaker.endPage+1}&type=${pageMaker.criteria.type}&search=${pageMaker.criteria.search}">Next</a>
	        </li>
	    </c:if>
	</ul>

13. boardMapper.xml에서 쿼리문에 검색 기능을 추가
예시)
<select id="getBoardList" resultType="kr.green.spring.vo.BoardVO">
  	select * from board where valid = 'I'
  	<if test="type == 1"> and title like concat('%', #{search}, '%') </if>		<!-- concat : 값을 이어 붙이는 함수 -->
  	<if test="type == 2"> and contents like concat('%', #{search}, '%') </if>	<!-- like를 통해 검색 기능을 적용 -->
  	<if test="type == 3"> and writer like concat('%', #{search}, '%') </if>
  	order by num desc
  	limit #{pageStart}, #{perPageNum}	<!-- Criteria 클래스의 getter를 통해 limit -->
</select>
<select id="getTotalCount" resultType="int">
	select count(*) from board where valid = 'I'
	<if test="type == 1"> and title like concat('%', #{search}, '%') </if>		<!-- concat : 값을 이어 붙이는 함수 -->
	<if test="type == 2"> and contents like concat('%', #{search}, '%') </if>	<!-- 페이지네이션에 적용하기 위해 페이지수를 다시 계산 -->
	<if test="type == 3"> and writer like concat('%', #{search}, '%') </if>
</select>

14.  /board/list.jsp에서 현재 페이지가 표시되도록 부트스트랩을 통해 active를 적용(페이지 번호가 생성되는 페이지네이션의 index와 같다면 active를 활성화)
예시) list.jsp
	    <!-- 페이지네이션 목록 -->
	    <c:forEach begin="${pageMaker.startPage }" end="${pageMaker.endPage}" var="index">	<!-- begin/end를 통해 시작과 끝을 지정하고 반복 -->
	        <c:if test="${pageMaker.criteria.page == index}">	<!-- uri의 페이지 번호가 index와 같다면 active를 추가-->
	      	  <li class="page-item active">							<!-- index : 반복문의 i같은 역할로 증감연산 -->
	       	     <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${index}&type=${pageMaker.criteria.type}&search=${pageMaker.criteria.search}">${index}</a>	<!-- 숫자를 찍는 역할 -->
	      	  </li>
	        </c:if>
	        <c:if test="${pageMaker.criteria.page != index}">	<!-- uri의 페이지 번호가 index와 다르다면 -->
	      	  <li class="page-item">								<!-- index : 반복문의 i같은 역할로 증감연산 -->
	     	       <a class="page-link" href="<%=request.getContextPath()%>/board/list?page=${index}&type=${pageMaker.criteria.type}&search=${pageMaker.criteria.search}">${index}</a>	<!-- 숫자를 찍는 역할 -->
	    	    </li>
	        </c:if>
	    </c:forEach>