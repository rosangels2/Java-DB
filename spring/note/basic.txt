views,URI(JSP) -> 컨트롤러(class) -> 서비스(인터페이스,구현 클래스) -> DAO(인터페이스, 구현 xml 또는 클래스) -> vo클래스 -> DB

URI - 컨틀롤러에게 기능 요청

컨트롤러 - 필요한 작업에 맞는 메서드를 서비스에 호출
Autowired - 생성자 없이 하나의 객체를 만들어서 해당 클래스나 인터페이스가 호출됐을 때 자동으로 주소를 연결해준다

서비스 - 컨트롤러에서 입력받은 기능을 실행하기 위해 인터페이스를 통해 기능을 분류

DAO - DB에 접근할 수 있는 메서드의 집합체(서비스 또는 컨트롤러에서 입력받은 기능에 맞는 함수를 호출)
root-context.xml - 인터페이스를 연결시켜주는 역할
Mapper.xml - 인터페이스의 파일명과 인터페이스명, 리턴타입 등을 입력하여 원하는 인터페이스를 호출

vo(value object)클래스 - 많은 데이터를 한번에 처리하기 위해 사용하는 클래스
	->데이터를 한번에 처리하기 위해 어느 곳에서든 사용하지만 DB에서 데이터를 가져오거나 보내줄 때 주로 사용 
	->멤버변수를 데이터의 속성명과 일치시키는 게 편하다

DB - 필요한 데이터들을 모아놓은 데이터베이스



폴더 구조

src > main > webapp > WEB-INF > spring > appServle > servlet-context.xml
				         root-context.xml
			         views > home.jsp
			         web.xml



파일 연결 순서
컨트롤러에서 원하는 URL에 맞는 메서드 추가 > return하는 JSP파일 추가



인터페이스는 객체를 생성할 수 있지만 인터페이스로 객체를 생성할 수 없다
MemberService mS = new MemberService();	//MemberService는 인터페이스이기 때문에 객체 생성 불가
MemberService mS = new MemberServiceImp();    //인터페이스를 구현한 클래스를 통해 객체 생성 가능
						->클래스는 기본적으로 생성자가 존재하기 때문에





