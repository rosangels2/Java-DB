Interceptor를 이용한 유저 정보 세션에 저장하기

posthandle - 컨트롤러에서 JSP로 정보를 전송할 때 작동
prehandle - URI에서 컨트롤러로 정보를 전송할 때 작동

1. 패키지 생성 - 경로 : 프로젝트>src/main/java 폴더에 생성
국가.회사명.프로젝트명.interceptor 패키지 생성
예 : kr.green.spring.interceptor

2. 컨트롤러에서 유저 정보를 Model에 넘기기
로그인 창에서 입력 받은 id와 pw를 이용하여 유저 정보 검색
유저 정보가 있으면 유저 정보를 Model에 추가 후 게시판 리스트 페이지로 이동
없으면 로그인 페이지 유지
@Autowired
private UserMapper userMapper;

@RequestMapping(value = "/", method = RequestMethod.GET)
public String home(Model model, HttpServletRequest request) {
    String id = request.getParameter("id");
    String pw = request.getParameter("pw");

    User user = userMapper.login(id,pw);

    if(user != null) {
        model.addAttribute("user", user);
        return "redirect:/board/list";
    }

    return "home";
}
로그인 페이지 소스
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

<html>
<head>
<title>Home</title>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.1.0/js/bootstrap.min.js"></script>
</head>
<body>

<div class="container">
<h1>
	로그인  
</h1>
  <form>
    <div class="form-group">
      <label for="usr">Id:</label>
      <input type="text" class="form-control" id="usr" name="id">
    </div>
    <div class="form-group">
      <label for="pwd">Password:</label>
      <input type="password" class="form-control" id="pwd" name="pw">
    </div>
    <button type="submit" class="btn btn-primary">로그인</button>
  </form>
</div>
</body>
</html>

3. 로그인 시도 시 실행할 interceptor 클래스 생성
LoginInterceptor 클래스 생성 및 메소드 오버라이딩
HandlerInterceptorAdapter 클래스를 상속 받은 LoginInterceptor 클래스 생성
postHandle 메소드를 오버라이딩
Controller에서 Model에 유저 정보를 저장하지 않았으면 modelMap.get("user")를 했을 때 null값이 들어가고 있으면 저장한 정보를 가져온다.
가져온 정보가 null이 아니면 해당 유저 정보를 세션에 저장
@Override
public void postHandle(
    HttpServletRequest request, 
    HttpServletResponse response, 
    Object handler, 
    ModelAndView modelAndView)
    throws Exception {
    ModelMap modelMap = modelAndView.getModelMap();
    User user = (User)modelMap.get("user");

    if(user != null){
        HttpSession session = request.getSession();
        session.setAttribute("user", user);
    }
}
4. LoginInterceptor를 servlet-context.xml에 interceptor로 등록
kr.green.spring.interceptor.LoginInterceptor 클래스를 bean에 등록
예시)
<beans:bean id="loginInterceptor" 
	class="kr.green.spring.interceptor.LoginInterceptor">
</beans:bean>
로그인 path가 주어졌을 때 loginInterceptor가 호출하도록 interceptor 태그에 등록

예시)
<interceptors>
    <interceptor>
        <mapping path="/"/>		<!-- URI 경로에 맞는 인터셉터를 실행	-->
        <beans:ref bean="loginInterceptor"/>
    </interceptor>
</interceptors>

최종적으로 servlet.context.xml에 추가한 코드
예시)
<beans:bean id="loginInterceptor" 
	class="kr.green.spring.interceptor.LoginInterceptor"></beans:bean>	<!-- 패키지명.클래스명 -->
<interceptors>
	<interceptor>
		<mapping path="/"/>	<!-- URI 경로에 맞는 인터셉터를 실행	-->
		<beans:ref bean="loginInterceptor"/>	<!-- 위쪽 beans의 id와 일치해야 한다 -->
	</interceptor>
</interceptors>

5. 컨트롤러에서 객체를 가져왔을 때 해당 객체를 interceptor가 사용할 변수에 저장
예시)
	@RequestMapping(value = "/signin", method = RequestMethod.POST)
	public String signinPost(Model model, MemberVO mVo){
		MemberVO user = memberService.signin(mVo);	// 리턴 타입을 MemberVO 객체로 바꾸고 가져온 객체를 새로운 객체 user에 저장
		if(user != null){
			model.addAttribute("user", user);	//인터셉터에서 사용하기 위해 변수 user에 객체 user 정보를 저장
			return "redirect:/member"; //로그인 성공 시 member.jsp로 이동
		}
		return "redirect:/signin";
	}

6. 원하는 JSP에서 ${user}를 통해 세션이 저장됐을 때의 객체 정보를 확인
예시)
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<a href="<%=request.getContextPath()%>/member/modify">회원정보 수정</a>
	${user}
</body>
</html>

7. JSP에서 세션에 객체가 저장돼 있는지 여부에 따라 html 구성을 다르게 적용 가능
예시) home.jsp
<body>	<!-- eq = equals(같다), ne = !equals(같지 않다) -->
	<c:if test="${user eq null}">	<!-- test = 조건식(해당 조건식 결과가 true이면 해당 코드를 실행하며, c:if는 else가 없다) -->
		<a href="<%=request.getContextPath()%>/signup">회원가입</a>
		<a href="<%=request.getContextPath()%>/signin">로그인</a>
	</c:if>
	<c:if test="${user ne null}">
		<a href="<%=request.getContextPath()%>/member/modify">회원정보 수정</a>
		<a href="<%=request.getContextPath()%>/board/list">게시판</a>
	${user} 변수 호출을 통해 interceptor에 저장된 객체 정보를 호출 
	</c:if>
</body>