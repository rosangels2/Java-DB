1. 컨트롤러에서 해당 URL을 입력받았을 때 연결할 메서드를 구현 후 매핑하고 jsp파일을 생성
예시)
	@RequestMapping(value="/member/modify", method = RequestMethod.GET)
	public String modifyGet(Model model) {
		logger.info("회원정보 수정");
		
		return "member/modify";
	}
	@RequestMapping(value="/member/modify", method = RequestMethod.POST)
	public String modifyPost(Model model, MemberVO mVo, String oPw, String pw1){
		logger.info("회원정보 수정");
		
		if(memberService.modify(mVo, oPw, pw1)){
			return "redirect:/";
		}
		return "redirect:/member/modify";
	}

2. quick fixed를 통해 서비스에 인터페이스를 생성
예시)
	boolean modify(MemberVO mVo, String oPw, String pw1);

3. 서비스 구현 클래스에서 quick fixed를 통해 해당 서비스 인터페이스를 구현 후 DAO의 인터페이스 호출
예시)
	@Override
	public boolean modify(MemberVO mVo, String oPw, String pw1) {
		memberDao.modify(mVo);	//해당 메서드명에서 quick fixed를 통해 다오에 인터페이스를 생성
		return false;
	}

4. quick fixed를 통해 DAO에 인터페이스를 생성
예시)
	void modify(MemberVO mVo); 

5. Mapper에서 해당 인터페이스에 맞는 쿼리문을 작성 후 연결
예시)
  <update id="modify">
  	update member
  	set pw = #{pw}, gender = #{gender}, email = #{email}, name = #{name}
  	where id = #{id}
  </update>

6. 서비스 구현 클래스에서 해당 DAO 인터페이스를 호출할 조건식을 구현
예시)
	@Override
	public boolean modify(MemberVO mVo, String oPw, String pw1) {
		if(mVo == null){
			return false;
		}
		MemberVO oVo = memberDao.getMember(mVo.getId());
		if(oVo == null){
			return false;
		}
		if(oVo.getPw().equals(oPw)){	//DB에서 가져온 객체의 비밀번호와 현재 입력한 비밀번호가 같다면
			if(mVo.getPw() == null || mVo.getPw() == "" || pw1 == null || pw1 == ""){	//비밀번호를 변경하지 않는 경우
				mVo.setPw(oPw);
			}else if(mVo.getPw().length() < 8 || mVo.getPw().length() > 13){	//새 비밀번호의 길이가 맞지 않다면
				return false;
			}else if(!mVo.getPw().equals(pw1)){	//새 비밀번호와 새 비밀번호 확인이 같지 않다면
				return false;
			}
			if(mVo.getEmail() == null || mVo.getEmail() == "") {	//email을 변경하지 않는 경우
				mVo.setEmail(oVo.getEmail());
			}
			memberDao.modify(mVo);	//DAO에서 modify 인터페이스를 실행하고  
			return true;	//true를 반환
		}
		return false;
	}