1. pom.xml에 json 사용을 위한 의존성 추가
예시) pom.xml
<!-- json 사용 라이브러리 -->
<dependency>
    <groupId>org.codehaus.jackson</groupId>
    <artifactId>jackson-mapper-asl</artifactId>
    <version>1.9.13</version>
</dependency>
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.8.7</version>
</dependency>

2. jsp에 ajax 사용
예시)
		$('#dup').click(function(){
			var id = $('input[name=id]').val();	//data를 통해 넘겨줄 매개변수에 저장할 값을 입력
			 $.ajax({
		        async:true,
		        type:'POST',
		        data:id,	//컨트롤러 매개변수로 넘겨주는 매개변수명
		        url:"dup",	//전송하는 URI 주소
		        dataType:"json",
		        contentType:"application/json; charset=UTF-8",
		        success : function(data){	//요청이 성공해서 보내준 값을 저장할 변수명
		           if(!data.isMember){	//컨트롤러를 통해 반환된 데이터의 id값이 true이면
		        	   alert('회원 가입이 가능한 아이디입니다.');
		               idCheck = 2;
		           }else{
		        	   alert('이미 가입된 아이디입니다.');
		        	   idCheck = 1;
		           }
		       	}
		    });
		});

3. Controller에서 ajax 적용
예시)
	@RequestMapping(value ="/dup")	//id 중복검사를 위한 메서드 매핑
	@ResponseBody
	public Map<Object, Object> idcheck(@RequestBody String id){
	    Map<Object, Object> map = new HashMap<Object, Object>();
	    boolean isMember =  true;
	    if(stdDao.getMember(id) == null){
	    	isMember = false;
	    }else{
	    	isMember = true;
	    }
	    map.put("isMember", isMember);	//돌려줄 정보를 map의 변수로 입력하고 map을 반환
	    return map;
	}

4. signup.jsp에 아이디 중복확인 버튼을 추가
예시) signup.jsp
				<div class="form-group">
					<label for="usr">아이디</label>
					<input type="text" class="form-control col-7" id="id" placeholder="아이디" name="id">
				</div>
				<div>
					<button type="button" class="btn btn-outline-success col-7" id="dup">아이디 중복확인</button>
				</div>

5. signup.jsp에서 중복검사를 적용하여 jquery를 코드를 추가
예시) signup.jsp
	var idCheck = 0;	//플래그로 사용할 전역변수 선언
	
	$(document).ready(function(){
		$('#id').change(function(){	//id가 변경됐을 때
			idCheck = 0;	//중복체크를 다시 하도록 전역변수 값을 수정
			if(!checkLength('#id',8,13)){
				alert('ID는 8~13자리를 입력해야 합니다.');
			}
		});
		//pw1 : 길이 -> 내용이 변경됐을 때 체크 or 가입 버튼이 눌렸을 때
		$('#pw').change(function(){
			if(!checkLength('#pw',8,13)){
				alert('비밀번호는 8~13자리를 입력해야 합니다.');
			}
		});
		$('#pw1').change(function(){
			if(!equals('#pw','#pw1')){
				alert('비밀번호와 비밀번호 확인이 일치하지 않습니다');
			}
		});
		
		//pw2 : pw1과 같은지 확인 -> 내용이 변경됐을 때 체크 or 가입 버튼이 눌렸을 때
		$('#ok').click(function(){
			if(!checkLength('#pw',8,13)){
				alert('비밀번호는 8~13자리를 입력해야 합니다.');
				return false;
			}else if(!equals('#pw','#pw1')){
				alert('비밀번호와 비밀번호 확인이 일치하지 않습니다');
				return false;
			}
			if(idCheck == 0){	//중복확인을 하지 않았을 때
				alert('아이디 중복 확인이 필요합니다.');
				return false;	//정보를 컨트롤러에 전송하지 않고 리턴
			}else if(idCheck == 1){	//이미 가입한 회원의 id와 중복될 때
				alert('이미 가입된 아이디입니다.');
				return false;	//정보를 컨트롤러에 전송하지 않고 리턴
			}else if(idcheck == 2)	//가입 가능한 id일 때
				alert('회원가입을 진행합니다.');
				idCheck = 0;	//전역변수를 초기화
				return true;
		});
	});