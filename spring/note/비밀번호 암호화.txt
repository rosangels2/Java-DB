Spring 비밀번호 암호화 - spring-security
비밀번호 암호화를 위하여 Spring-security를 이용한다.
회원 가입 시 비밀번호를 인코딩하여 저장한다.
로그인 시 입력한 비밀 번호와 인코딩 된 비밀번호를 비교하여 (디코딩을 하지 않고서) 같으면 로그인 성공, 실패하면 로그인 실패

1. pom.xml에 의존성 추가
예시)
<!--스프링시큐리티 web 라이브러리-->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-web</artifactId>
    <version>4.1.0.RELEASE</version>
</dependency>
  <!--스프링시큐리티 core 라이브러리-->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-core</artifactId>
    <version>4.1.0.RELEASE</version>
</dependency>
  <!--스프링시큐리티 config 라이브러리-->
<dependency>
    <groupId>org.springframework.security</groupId>
    <artifactId>spring-security-config</artifactId>
    <version>4.1.0.RELEASE</version>
</dependency>

2. spring-security.xml 생성 - /WEB_INF/spring 폴더에 spring-security.xml 생성
예시)
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">
    <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />  
</beans:beans>

3. web.xml에 spring-security.xml를 등록
예시)
<!-- 수정전 web.xml-->
<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
        /WEB-INF/spring/root-context.xml
    </param-value>
</context-param>
<!-- 수정후 web.xml-->
<context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
        /WEB-INF/spring/root-context.xml
        /WEB-INF/spring/spring-security.xml
    </param-value>
</context-param>

4. 회원 가입 시 비밀번호를 암호화
회원 가입 시 암호화가 진행되는 Controller에 BCryptPasswordEncoder 멤버 객체 추가
예시) MemberServiceImp.java의 signup 메서드
	@Autowired
	BCryptPasswordEncoder passwordEncoder;
	
	@Override
	public boolean signup(MemberVO mVo, String pw1) {
		//기존에 해당 아이디가 있는지 체크
		//있으면 false 반환하고 종료 없으면 회원가입 진행
		if(mVo == null){	//예외처리
			return false;
		}
		if(mVo.getPw().length() < 8 || mVo.getPw().length() > 13) {
			return false;
		}
		if(!mVo.getPw().equals(pw1)) {
			return false;
		}
		MemberVO oVo = memberDao.getMember(mVo.getId());	//mVo.getID를 통해 getMember에서 객체를 가져와 oVo에 저장
		if(oVo != null){	//입력된 id를 통해 가져온 객체가 null이 아니라면(이미 가입돼 있다면)
			return false;	//false를 반환
		}
		mVo.setName("");
		//비밀번호 암호화 추가 코드
		String encodePw = passwordEncoder.encode(mVo.getPw());	//passwordEncoder의 encode 메서드로 비밀번호를 암호화하여 저장
		mVo.setPw(encodePw);	//암호화된 비밀번호로 비밀번호를 재설정
		memberDao.signup(mVo);	//회원가입을 진행
		return true;
	}

5. 로그인 시 비밀 번호를 비교 - maches 메소드를 이용하여 암호화 되지 않은 비밀번호와 암호화 된 비밀번호를 비교
예시) MemberServiceImp.java
	@Override
	public MemberVO signin(MemberVO mVo){
		if(mVo == null){	//예외처리 
			return null;
		}
		mVo.setName("");
		MemberVO oVo = memberDao.getMember(mVo.getId());	//mVo.getID를 통해 getMember에서 객체를 가져와 oVo에 저장
		if(oVo == null){	
			return null;
		}
		//비밀번호 암호화 추가 코드
		if(passwordEncoder.matches(mVo.getPw(), oVo.getPw())){	//matches(입력 비밀번호, 암호화돼 저장된 비밀번호) - 입력 비밀번호를 암호화해 비교하는 메서드
			return oVo;
		}
		return null;
	}

Reference
블로그 : https://shj7242.github.io/2017/12/10/Spring31/