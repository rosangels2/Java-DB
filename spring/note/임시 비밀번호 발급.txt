1. home.jsp 파일에서 비밀번호 찾기 링크 추가
예시)
<a href="<%=request.getContextPath()%>/password/find" class="float-left">비밀번호 찾기</a>

2. find.jsp 생성
예시)
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<jsp:include page="/WEB-INF/views/common/header.jsp"></jsp:include>
	<link rel="stylesheet" href="<%=request.getContextPath()%>/resources/css/main.css">
	
	<script type="text/javascript">
		$(document).ready(function(){
			$('input[name=id]').focus();
		})
		
	</script>
	<title>로그인</title>
	<style>
	*{
		margin: 0;
		padding : 0;
	}
	.main{
		margin-top:50px;
	}
	.row{
		margin: 5px 0px;
	}
	.fab.fa-amazon{
		font-size: 100px;
		color: red;
	}
	</style>
</head>
<body>
	<div>
		<div class="offset-4 col-4 border border-dark mt-5 clearfix">
			<h1 class="text-center">비밀번호 찾기</h1>
			<form method="post" action="<%=request.getContextPath()%>/password/send" id="findForm">
				<div class="row">
					<label class="col-4">아이디</label>
					<input type="text"class="form-control col-7" placeholder="아이디" name="id" tabindex="1">
				</div>
				<div class="row">
					<label class="col-4">이메일</label>
					<input type="email"class="form-control col-7" placeholder="이메일" name="email" tabindex="2">
				</div>
				<div class="offset-7 col-4 clearfix p-0">
					<button type="button" class="btn btn-primary float-right" id="findBtn">비밀번호 찾기</button>
				</div>
			</form>
		</div>
	</div>
</body>
</html>

3. 컨트롤러에서 경로에 맞는 메서드 매핑
예시)
	@RequestMapping(value = "/password/find")
	public String passwordFind() {

	    return "member/find";
	}

4. 아이디와 비밀번호 인증을 위해 find.jsp에서 ajax를 추가
예시) find.jsp
		$(document).ready(function(){
			$('input[name=id]').focus();
			$('#findBtn').click(function(){
				var id = $('input[name=id]').val();		//인풋창에 입력받은 값을 저장
				var email = $('input[name=email]').val();
				$.ajax({
		        async:true,
		        type:'POST',
		        data:{'id':id, 'email': email},		//매개변수로 컨트롤러에 변수값을 전송
		        url:"<%=request.getContextPath()%>/checkemail",
		        dataType:"json",
		        contentType:"application/json; charset=UTF-8",
		        success : function(data){
		            if(data.isOk){		//입력한 id와 email이 회원 정보와 일치하면
		            	$('#findForm').submit();	//form태그의 정보 전송 기능을 실행
		            }else{	//입력한 id와 email이 회원 정보와 일치하지 않으면
		            	alert('일치하는 정보가 없습니다.');		//정보가 일치하지 않음을 알리고 form태그의 정보를 전송하지 않는다
		            }
		      	  }
		   		});
			});
		})

5. ajax가 전송한 정보를 사용할 메서드를 컨트롤러에서 매핑
예시)
	@RequestMapping(value ="/checkemail")
	@ResponseBody
	public Map<Object, Object> emailcheck(
			@RequestBody String str){
	    Map<Object, Object> map = new HashMap<Object, Object>();
	    
	    String [] arr = str.split("&");	//전송된 정보를 &을 기준으로 구분하여 나눠 배열에 저장
	    String id = arr[0];	//&을 기준으로 앞쪽의 0번지값을 String객체 id에 저장한다
	    String email = "";	//빈 문자열 객체를 생성
	    try {
			email=URLDecoder.decode(arr[1], "UTF-8");	//인코딩 돼 깨진 email값을 decode 메서드로 복원
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	    id = memberService.getVal(id);	//id=xxx 형식의 값에서 id=를 빼고 xxx만을 가져오는 인터페이스 호출 후 결과값을 저장
	    email = memberService.getVal(email);	//email=xxx 형식의 값에서 email=를 빼고 xxx만을 가져오는 인터페이스 호출 후 결과값을 저장
	    
	    boolean isOk = memberService.checkMember(id,email);	//입력받은 id와 email이 회원 정보와 일치하는지 확인하고 결과를 boolean 변수에 저장
	    map.put("isOk",isOk);	//ajax에 전송할 변수 isOk에 boolean 변수값을 저장 
	    return map;	//map 정보를 ajax에 반환
	}

6. MemberService.java에서 인터페이스들 생성 및 오버로딩
예시)
	public String getVal(String id);	//입력받은 값에서 실제 값만을 추출	예시)id=xxx > xxx추출
	
	public String createPw();	//새 비밀번호를 랜덤으로 생성
	
	public void modify(String id, String email, String newPw);		//새 비밀번호를 랜덤으로 생성해 암호화한 뒤 회원 정보를 수정
	
	public boolean checkMember(String id, String email);	//회원정보와 입력한 email이 일치하는지 확인
	
	public void sendMail(String email, String title, String contents);	//매개변수를 입력받아 email을 전송하는 인터페이스

7. MemberServiceImp.java 클래스에서 해당 인터페이스들 구현
예시)
	@Override
	public boolean isMember(String id) {
		if(memberDao.getMember(id) == null) {
			return false;
		}
		return true;
	}

	@Override
	public String getVal(String id) {
		String [] arr = id.split("=");	//입력받은 문자열을 =을 기준으로 배열로 나눠서 저장 
		if(arr.length == 2)	//배열의 길이가 2라면 	예시)id=xxx -> 0번지 = id, 1번지 = xxx
			return arr[1];	//배열의 1번지를 반환(실제 입력값인 xxx)
		else
			return "";
	}
	
	@Override
	public boolean checkMember(String id, String email) {	//입력받은 id와 email값을 매개변수로 사용
		MemberVO user = memberDao.getMember(id);	//id를 통해 가져온 회원 정보를 저장
		if(user != null && user.getEmail().equals(email)) {	//회원정보의 이메일과 입력한 이메일이 같다면 
			return true;	//true를 반환
		}
		return false;
	}

	@Override
	public String createPw() {		//랜덤한 비밀번호를 생성
		String str ="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String pw="";
		for(int i=0; i< 8; i++) {
			int r = (int)(Math.random()*62);
			pw += str.charAt(r);
		}
		return pw;
	}
	
	@Override
	public void modify(String id, String email, String newPw) {	
		MemberVO user = memberDao.getMember(id);	//id를 통해 회언 정보를 가져와서 변수에 저장
		if(user == null)	return;
		if(!user.getEmail().equals(email))	return;
		String encodePw = passwordEncoder.encode(newPw);	//새로 생성된 임시 비밀번호를 암호화해 변수에 저장
		user.setPw(encodePw);	//암호화된 비밀번호로 객체 정보를 수정
		memberDao.modify(user);	//해당 객체 정보를 통해 회원 정보를 수정
	}

8. 임시 비밀번호 메일 발송을 위해 form 태그 정보 전송 시 매핑할 메서드를 컨트롤러에서 매핑
예시) 컨트롤러
	@RequestMapping(value = "/password/send")
	public String passwordSend(String id,String email) {
		String newPw = memberService.createPw();	//랜덤한 임시 비밀번호를 생성하여 변수에 저장
		memberService.modify(id,email,newPw);	//id, email, 임시 비밀번호를 사용하여 회원 정보를 수정 
		String title = "변경된 비밀번호입니다.";
		String contents = "변경된 비밀번호입니다.\n"+newPw+"\n";
		memberService.sendMail(email,title,contents);	//변경된 값을 통해 email을 전송
	    return "send";
	}

9. 비밀번호 찾기 기능 실행 후 화면을 표시할 views/send.jsp 생성
예시)
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>비밀번호 찾기가 완료되었습니다.</h1>
	<a href="<%=request.getContextPath()%>/">홈으로 바로가기</a>
	<a href="<%=request.getContextPath()%>/signin">로그인 바로가기</a>
</body>
</html>

10. MemberService.java 인터페이스 생성
예시)
	public void sendMail(String email, String title, String contents);

11. MemberServiceImp.java 클래스에서 해당 인터페이스들 구현
예시)
	@Override
	public void sendMail(String email, String title, String contents) {		//입력받은 정보를 통해 이메일을 전송
		String setfrom = "stajun@google.com";         
	    try {
	        MimeMessage message = mailSender.createMimeMessage();
	        MimeMessageHelper messageHelper 
	            = new MimeMessageHelper(message, true, "UTF-8");
	        
	        messageHelper.setFrom(setfrom);  // 보내는사람 생략하거나 하면 정상작동을 안함
	        messageHelper.setTo(email);     // 받는사람 이메일
	        messageHelper.setSubject(title); // 메일제목은 생략이 가능하다
	        messageHelper.setText(contents);  // 메일 내용

	        mailSender.send(message);
	    } catch(Exception e){
	        System.out.println(e);
	    }
	}

12. root-context.xml 파일에서 보내는 사람의 메일 정보를 입력
예시)
	<!-- root-context.xml -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <property name="host" value="smtp.gmail.com" />
	    <property name="port" value="587" />
	    <property name="username" value="*****@gmail.com" />	<!-- 실제 email 주소와 비밀번호를 입력 -->
	    <property name="password" value="*****" />
	    <property name="javaMailProperties">
	        <props>
	            <prop key="mail.transport.protocol">smtp</prop>
	            <prop key="mail.smtp.auth">true</prop>
	            <prop key="mail.smtp.starttls.enable">true</prop>
	            <prop key="mail.debug">true</prop>
	        </props>
	    </property>
	</bean>

13. 링크된 webapp/resources/css/main.css 파일 생성
예시)
	@charset "EUC-KR";

14. 비밀번호 찾기를 통해 메일이 제대로 수신되는지 확인