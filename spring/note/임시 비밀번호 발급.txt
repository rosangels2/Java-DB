1. 영문자(대문자, 소문자)와 숫자로 이루어진 임시 비밀번호 8자리를 랜덤으로 만들어서 URI:/ 경로를 실행하면 콘솔에 출력하도록 작성
예시) 컨트롤러
//@RequestMapping(요청을 연결) - 서버 부분을 제외한 URL이 "/"고 방식이 get이면 home메서드를 실행
	@RequestMapping(value = "/", method = RequestMethod.GET)	//get방식으로 호출했을 떄 값과 일치하는 메서드를 호출
	public String home(Model model){
		logger.info("메인페이지 실행");	//console에 입력되는 메세지		
		
		//방법1 - char[] 사용 시 출력할 떄 toString에서 원하지 않는 값이 출력될 수 있다
		char[] pw = new char[8];
		for(int i=0 ; i<8 ; i++){
			int r = (int)(Math.random()*62);
			if(r <= 9){
				pw[i] = (char)('0'+r);
			}else if(r <= 35){
				pw[i] = (char)('a'+(r-10));	//아스키 코드값이 연속적인 걸 이용
			}else{
				pw[i] = (char)('A'+(r-36));
			}
		}
		System.out.println("pw = " + pw);
		//방법2 - char[] 사용 시 출력할 떄 toString에서 원하지 않는 값이 출력될 수 있다
		char[] pw1 = new char[]{0,1,2,3,4,5,6,7,8,9,'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'};
		char[] password = new char[8];
		for(int i=0 ; i<8 ; i++){
			int r = (int)(Math.random()*62);
			password[i] = pw1[r-1];
		}
		System.out.println("pw1 = " + pw1);
		//방법3
		String str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String pw2 = "";
		for(int i=0 ; i<8 ; i++){
			int r = (int)(Math.random()*62);
			pw2 += str.charAt(r);
		}
		System.out.println("pw2 = " + pw2);
		
		return "home";	//사용자에게 home.jsp를 보내준다
	}

2. URI를 통해 id값을 넘겨주고 해당 id값을 매개변수로 사용하는 컨트롤러 메서드를 생성 후 매핑하고 임시 비밀번호를 생성
예시) 컨트롤러
@RequestMapping(value = "pwSearch")
	public String pwSearch(Model model, String id, HttpServletRequest request){
		String str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String pw2 = "";
		for(int i=0 ; i<8 ; i++){
			int r = (int)(Math.random()*62);
			pw2 += str.charAt(r);
		}
		System.out.println(pw2);	//임시비밀번호 생성값 확인
		return "redirect:/";
	}

3. 생성된 비밀번호와 id를 매개변수로 넘겨준다
예시) 컨트롤러
	if(memberService.pwSearch(id, pw2)){
		return true;
	}

4. 매개변수로 넘겨받은 정보를 사용해 서비스 인터페이스를 생성
예시)
	public boolean pwSearch(String id, String pw2);

5. 서비스 구현 메서드에서 비밀번호를 암호화하여 재설정한 뒤 회원 정보를 변경하는 DAO인터페이스를 호출
예시) MemberService.java
	@Override
	public boolean pwSearch(String id, String pw2) {
		if(id == null || pw2 == null){	//예외처리
			return false;
		}
		MemberVO mVo = memberDao.getMember(id);	//id를 통해 객체를 가져와 정보를 저장
		if(mVo != null){	//예외처리
			String encodePw = passwordEncoder.encode(pw2);	//생성된 임시 비밀번호를 암호화
			mVo.setPw(encodePw);	//암호화된 비밀번호로 객체 정보를 수정
			memberDao.modify(mVo);	//수정된 정보를 통해 modify 인터페이스로 회원정보 수정
			return true;
		}		
		return false;
	}

7. 임시 비밀번호를 이메일로 전송하도록 컨트롤러를 수정
예시)
	@RequestMapping(value = "pwSearch")
	public String pwSearch(Model model, String id, HttpServletRequest request){
		String str = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		String pw2 = "";
		for(int i=0 ; i<8 ; i++){
			int r = (int)(Math.random()*62);
			pw2 += str.charAt(r);
		}
		System.out.println(pw2);
		if(memberService.pwSearch(id, pw2)){
		    String setfrom = "abc12345678@naver.com";         
		    String tomail  = "rosangels2@naver.com";     // 받는 사람 이메일
		    String title   = "임시 비밀번호 발급";      // 제목
		    String content = pw2;    // 내용

		    try {
		        MimeMessage message = mailSender.createMimeMessage();
		        MimeMessageHelper messageHelper 
		            = new MimeMessageHelper(message, true, "UTF-8");

		        messageHelper.setFrom(setfrom);  // 보내는사람 생략하거나 하면 정상작동을 안함
		        messageHelper.setTo(tomail);     // 받는사람 이메일
		        messageHelper.setSubject(title); // 메일제목은 생략이 가능하다
		        messageHelper.setText(content);  // 메일 내용

		        mailSender.send(message);
		    } catch(Exception e){
		        System.out.println(e);
		    }
			return "redirect:/";
		}
		return "redirect:/";
	}

9. root-context.xml에서 이메일 정보 입력
예시)
	<!-- root-context.xml -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	    <property name="host" value="smtp.gmail.com" />
	    <property name="port" value="587" />
	    <property name="username" value="rosangels777@gmail.com" />	<!-- 실제 email 주소와 비밀번호를 입력 -->
	    <property name="password" value="*********" />
	    <property name="javaMailProperties">
	        <props>
	            <prop key="mail.transport.protocol">smtp</prop>
	            <prop key="mail.smtp.auth">true</prop>
	            <prop key="mail.smtp.starttls.enable">true</prop>
	            <prop key="mail.debug">true</prop>
	        </props>
	    </property>
	</bean>

8. URI에 id를 입력해서 매핑하여 컨트롤러 실행
예시)
	http://localhost:8080/spring/pwSearch?id=000000

9. 임시 비밀번호가 발급 메일이 도착했는지 확인