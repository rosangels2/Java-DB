1. signup.jsp에서 아이디 입력창 다음 위치에 중복 확인 버튼 추가
예시)
		<div class="form-group">
			<label for="usr">아이디</label>
			<input type="text" class="form-control col-7" id="id" placeholder="아이디" name="id">
		</div>
		<div>
			<button type="button" class="btn btn-outline-success col-7" id="dup">아이디 중복확인</button>
		</div>

2. jsp에서 중복 확인 버튼을 누를 시 ajax가 실행되도록 코드 추가
예시)
		$('#dup').click(function(){
			var id = $('input[name=id]').val();	//data를 통해 넘겨줄 매개변수에 저장할 값을 입력
			 $.ajax({
		        async:true,
		        type:'POST',
		        data:id,	//컨트롤러에게 넘겨주는 매개변수명
		        url:"dup",	//전송하는 URI 주소
		        dataType:"json",
		        contentType:"application/json; charset=UTF-8",
		        success : function(data){	//요청이 성공해서 보내준 값을 저장할 변수명

		       }
		    });
		});

3. 컨트롤러에서 매핑 후 입력된 id가 제대로 전달되는지 출력하여 확인
예시)
	@RequestMapping(value ="/dup")	//id 중복검사를 위한 메서드 매핑
	@ResponseBody
	public Map<Object, Object> idcheck(@RequestBody String id){
	    Map<Object, Object> map = new HashMap<Object, Object>();

	    System.out.println(id);

	    return map;
	}

4. map.put을 통해 제대로 정보가 전달되는지 ajax에서 console.log를 통해 콘솔로 확인
예시) 컨트롤러
	@RequestMapping(value ="/dup")	//id 중복검사를 위한 메서드 매핑
	@ResponseBody
	public Map<Object, Object> idcheck(@RequestBody String id){
	    Map<Object, Object> map = new HashMap<Object, Object>();

	    System.out.println(id);
	    map.put("id", id);

	    return map;
	}

예시) signup.jsp

		$('#dup').click(function(){
			var id = $('input[name=id]').val();	//data를 통해 넘겨줄 매개변수에 저장할 값을 입력
			 $.ajax({
		        async:true,
		        type:'POST',
		        data:id,	//컨트롤러에게 넘겨주는 매개변수명
		        url:"dup",	//전송하는 URI 주소
		        dataType:"json",
		        contentType:"application/json; charset=UTF-8",
		        success : function(data){	//요청이 성공해서 보내준 값을 저장할 변수명
			console.log(data.id);
		       }
		    });
		});

5. 정보가 제대로 전달된다면 컨트롤러에서 id를 통해 회원정보가 일치하는지 여부를 서비스를 호출해 확인
예시)
	@RequestMapping(value ="/dup")	//id 중복검사를 위한 메서드 매핑
	@ResponseBody
	public Map<Object, Object> idcheck(@RequestBody String id){
	    Map<Object, Object> map = new HashMap<Object, Object>();

	    boolean isMember =  true;	//변수 초기화

	    memberDao.getMember(id);

	    return map;
	}



6. 컨트롤러에서 서비스를 호출하여 얻은 정보를 리턴할 변수에 저장
예시)
	@RequestMapping(value ="/dup")	//id 중복검사를 위한 메서드 매핑
	@ResponseBody
	public Map<Object, Object> idcheck(@RequestBody String id){
	    Map<Object, Object> map = new HashMap<Object, Object>();
	    
	    boolean isMember =  true;
	    
	    if(memberDao.getMember(id) == null){
	    	isMember = false;
	    }else{
	    	isMember = true;
	    }

	    return map;
	}


7. 컨트롤러에서 map.put을 통해 변수값을 ajax에 전달
예시)
	@RequestMapping(value ="/dup")	//id 중복검사를 위한 메서드 매핑
	@ResponseBody
	public Map<Object, Object> idcheck(@RequestBody String id){
	    Map<Object, Object> map = new HashMap<Object, Object>();
	    
	    boolean isMember =  true;
	    
	    if(memberDao.getMember(id) == null){
	    	isMember = false;	//일치하는 회원이 없다
	    }else{
	    	isMember = true;	//일치하는 회원이 있다
	    }

	    map.put("isMember", isMember);	//돌려줄 정보를 map의 변수로 입력하고 map을 반환

	    return map;
	}

8. 전달된 변수에 따라서 ajax의 결과를 다르게 반환
예시)
		$('#dup').click(function(){
			var id = $('input[name=id]').val();	//data를 통해 넘겨줄 매개변수에 저장할 값을 입력
			 $.ajax({
		        async:true,
		        type:'POST',
		        data:id,	//컨트롤러에게 넘겨주는 매개변수명
		        url:"dup",	//전송하는 URI 주소
		        dataType:"json",
		        contentType:"application/json; charset=UTF-8",
		        success : function(data){	//요청이 성공해서 보내준 값을 저장할 변수명
		           if(!data.isMember){	//컨트롤러를 통해 반환된 데이터의 id값이 true이면
		        	   alert('회원 가입이 가능한 아이디입니다.');
		           }else{
		        	   alert('이미 가입된 아이디입니다.');
		           }
		       }
		    });
		});

9. 전역변수를 생성해 ajax의 결과에 따라 알림 메세지와 결과를 다르게 처리
예시)
	var isCheck = -1;	//중복 확인을 요구하는 초기값

	$(document).ready(function(){

		$('#dup').click(function(){
		var id = $('input[name=id]').val();	//data를 통해 넘겨줄 매개변수에 저장할 값을 입력
		 $.ajax({
		 async:true,
		type:'POST',
		data:id,	//컨트롤러에게 넘겨주는 매개변수명
		url:"dup",	//전송하는 URI 주소
		dataType:"json",
		contentType:"application/json; charset=UTF-8",
		success : function(data){	//요청이 성공해서 보내준 값을 저장할 변수명

			if(!data.isMember){	//컨트롤러를 통해 반환된 데이터의 id값이 true이면
				alert('회원 가입이 가능한 아이디입니다.');
		        	  	isCheck = 1;	//중복 확인 성공(회원가입 가능)
			}else{
		        		alert('이미 가입된 아이디입니다.');
		        	 	isCheck = 0;	//중복 확인 실패(회원가입 불가능)
		            }
		         }
		    });
		});

	});	//레디

10. id의 입력값이 바뀐다면 전역변수를 초기화해 중복 확인을 다시 하도록 jquery 이벤트 함수 생성
예시)
	$(document).ready(function(){
		$('#id').change(function(){
			isCheck = -1;
		});
	});

11. 중복 확인 성공을 알려주는 전역 변수 isCheck 값이 1일 때만 회원가입이 진행되도록 jquery 수정
예시)
	var isCheck = -1;
	
	$(document).ready(function(){
		
		$('#id').change(function(){
			isCheck = -1;
		});
		
		$('#signup').submit(function(){		//회원가입 버튼을 눌렀을 때
			if(!checkLength('#signup input[name=id]',8,13)){	//아이디의 길이가 맞지 않다면
				alert('아이디는 8~13자리입니다.');
				return false;
			}
			if(isCheck == -1){	//아이디 중복확인을 하지 않았을 경우
				alert('아이디 중복 확인을 해주세요');
				return false;
			}else if(isCheck == 0){	//이미 가입된 아이디일 경우
				alert('가입한 회원 아이디입니다.');
				return false;
			}else{
				
			}
			if(!checkLength('#signup input[name=pw]',8,13)){	//비밀번호의 길이가 맞지 않다면
				alert('비밀번호는 8~13자리입니다.')
				return false;
			}
			if(!equalsPw('#signup input[name=pw]','#signup input[name=pw1]')){
				alert('비밀번호와 일치하지 않습니다.')
				return false;
			}
			if($('#signup input[type=email]').val().length == 0){	//이메일이 입력되지 않았다면
				alert('이메일을 입력해주세요.')
				return false;
			}
			alert('회원가입이 완료 되었습니다.');
			isCheck = -1;	//회원 가입 완료 후 isCheck를 초기화
			return true;
		});

	});	//레디